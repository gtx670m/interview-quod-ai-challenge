{"version":3,"sources":["api/listApi.js","app/listSlice.js","app/store.js","components/List/index.js","components/Menu/index.js","App.js","reportWebVitals.js","index.js"],"names":["listApi","fetch","payload","Promise","resolve","reject","page","per_page","method","then","data","json","createAsyncThunk","params","thunkAPI","a","listIssue","listSlice","createSlice","name","initialState","recentIssue","highlightIssue","count","reducers","setHighlightIssue","state","action","issue","isActive","addToRecentIssue","length","pop","unshift","extraReducers","pending","loading","rejected","error","fulfilled","actions","rootReducer","combineReducers","list","store","configureStore","reducer","useAppDispatch","useDispatch","List","props","interact","useSelector","dispatch","className","map","index","id","title","onClick","trim","renderListIssue","Menu","App","useState","setPage","useEffect","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAceA,EAdC,CACdC,MAAM,SAAD,oGAAC,EAAC,SAACC,GACN,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAAY,IAAD,EACHH,EAA3BI,YAD8B,MACvB,EADuB,IACHJ,EAAjBK,gBADoB,MACT,EADS,EAEtCN,MAAM,wDAAD,OACqDK,EADrD,qBACsEC,GACzE,CACEC,OAAQ,QAEVC,MAAK,SAACC,GAAD,OAAUN,EAAQM,EAAKC,kBCNvBV,EAAQW,YACnB,aADmC,uCAEnC,WAAOC,EAAQC,GAAf,eAAAC,EAAA,sEAC0Bf,EAAQC,MAAMY,GADxC,cACQG,EADR,yBAESA,GAFT,2CAFmC,yDAQxBC,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZJ,UAAW,GACXK,YAAa,GACbC,eAAgB,GAChBC,MAAO,GAETC,SAAU,CACRC,kBAAmB,SAACC,EAAOC,GAAY,IAAD,EACKA,EAAOzB,QADZ,IAC5B0B,aAD4B,MACpB,GADoB,MAChBC,gBADgB,SAGlCH,EAAMJ,eADJO,EACqB,GAEAD,GAG3BE,iBAAkB,SAACJ,EAAOC,GAAY,IAAD,EACMA,EAAOzB,QADb,IAC3B0B,aAD2B,MACnB,GADmB,MACfC,cADe,WAG7BH,EAAML,YAAYU,OAAS,GAC7BL,EAAML,YAAYW,MAClBN,EAAML,YAAYY,QAAQL,IAE1BF,EAAML,YAAYY,QAAQL,IAG9BF,EAAMH,MAAQG,EAAML,YAAYU,SAGpCG,eAAa,mBACVjC,EAAMkC,SAAU,SAACT,GAChBA,EAAMU,SAAU,KAFP,cAIVnC,EAAMoC,UAAW,SAACX,EAAOC,GACxBD,EAAMU,SAAU,EAChBV,EAAMY,MAAQX,EAAOW,SANZ,cAQVrC,EAAMsC,WAAY,SAACb,EAAOC,GACzBD,EAAMU,SAAU,EAChBV,EAAMV,UAAYW,EAAOzB,WAVhB,K,EAewCe,EAAUuB,QAAlDf,E,EAAAA,kBAAmBK,E,EAAAA,iBAEnBb,IAAf,Q,cCrDMwB,EAAcC,YAAgB,CAClCC,SAGIC,EAAQC,YAAe,CAC3BC,QAASL,IAGEM,EAAiB,kBAAMC,eACrBJ,ICoCAK,EA3CF,SAACC,GAAW,IAAD,EACsBA,EAApClC,iBADc,MACF,GADE,IACsBkC,EAApBC,gBADF,WAEUC,aAAY,SAAC1B,GAAD,OAAWA,EAAMiB,QAArDrB,sBAFc,MAEG,GAFH,EAGhB+B,EAAWN,IA4BjB,OACE,qBAAKO,UAAU,OAAf,SACE,6BAvBoB,SAACtC,GACvB,OAAOA,EAAUuC,KAAI,SAAC3B,EAAO4B,GAAW,IAAD,EACL5B,EAAxB6B,UAD6B,MACxB,GADwB,IACL7B,EAAf8B,aADoB,MACZ,GADY,EAE/B7B,EAAWP,EAAemC,KAAOA,EACvC,OACE,qBACEH,UAAS,UAAKzB,EAAW,SAAW,GAA3B,YAAiCsB,EAAW,WAAa,QAClEQ,QAAS,WAZY,IAACzD,EAahBiD,IAZZE,EAAS5B,EADmBvB,EAcG,CAAE0B,QAAOC,cAZxCwB,EAASvB,EAAiB5B,MAQtB,UASE,sBAAMoD,UAAU,iBAAhB,SAAkCG,IACjCC,EAAME,SAVT,gBAOgBJ,OAWbK,CAAgB7C,QC3BZ8C,G,MATF,WAAO,IACVvC,EAAU6B,aAAY,SAAC1B,GAAD,OAAWA,EAAMiB,QAAvCpB,MACR,OACE,qBAAK+B,UAAU,OAAf,SACE,qBAAKA,UAAU,QAAf,SAAwB/B,QCqCfwC,EArCH,WAAO,IAAD,EAC4BX,aAAY,SAAC1B,GAAD,OAAWA,EAAMiB,QAAjE3B,EADQ,EACRA,UAAWK,EADH,EACGA,YAAae,EADhB,EACgBA,QAC1BiB,EAAWN,IAFD,EAGQiB,mBAAS,GAHjB,mBAGT1D,EAHS,KAGH2D,EAHG,KAKhBC,qBAAU,WACRb,EAASpD,EAAM,CAAEK,OAAMC,SAAU,OAChC,CAACD,IAMJ,OACE,sBAAKgD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,aAAf,UACE,4CACA,cAAC,EAAD,CAAMtC,UAAWA,IACjB,wBACEsC,UAAU,UACVK,QAbc,WACtBM,EAAQ3D,EAAO,IAaP6D,SAAU/B,EAHZ,SAKGA,EAAU,aAAe,YAG9B,sBAAKkB,UAAU,aAAf,UACE,8CACA,cAAC,EAAD,CAAMtC,UAAWK,EAAa8B,UAAU,cC1BnCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJmC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.bcbe7b1a.chunk.js","sourcesContent":["const listApi = {\n  fetch: (payload) => {\n    return new Promise((resolve, reject) => {\n      const { page = 1, per_page = 5 } = payload;\n      fetch(\n        `https://api.github.com/repos/rails/rails/issues?page=${page}&per_page=${per_page}`,\n        {\n          method: \"GET\",\n        }\n      ).then((data) => resolve(data.json()));\n    });\n  },\n};\n\nexport default listApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport listApi from \"../api/listApi\";\n\nexport const fetch = createAsyncThunk(\n  \"list/fetch\",\n  async (params, thunkAPI) => {\n    const listIssue = await listApi.fetch(params);\n    return listIssue;\n  }\n);\n\nexport const listSlice = createSlice({\n  name: \"list\",\n  initialState: {\n    listIssue: [],\n    recentIssue: [],\n    highlightIssue: {},\n    count: 0,\n  },\n  reducers: {\n    setHighlightIssue: (state, action) => {\n      const { issue = {}, isActive = false } = action.payload;\n      if (isActive) {\n        state.highlightIssue = {};\n      } else {\n        state.highlightIssue = issue;\n      }\n    },\n    addToRecentIssue: (state, action) => {\n      const { issue = {}, isActive = false } = action.payload;\n      if (!isActive) {\n        if (state.recentIssue.length > 4) {\n          state.recentIssue.pop();\n          state.recentIssue.unshift(issue);\n        } else {\n          state.recentIssue.unshift(issue);\n        }\n      }\n      state.count = state.recentIssue.length;\n    }\n  },\n  extraReducers: {\n    [fetch.pending]: (state) => {\n      state.loading = true;\n    },\n    [fetch.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.error;\n    },\n    [fetch.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.listIssue = action.payload;\n    },\n  },\n});\n\nexport const { setHighlightIssue, addToRecentIssue } = listSlice.actions;\n\nexport default listSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { combineReducers } from \"redux\";\r\nimport list from \"./listSlice\";\r\n\r\nconst rootReducer = combineReducers({\r\n  list,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport const useAppDispatch = () => useDispatch();\r\nexport default store;\r\n","import React from \"react\";\nimport \"./styles.scss\";\nimport PropTypes from \"prop-types\";\nimport { setHighlightIssue, addToRecentIssue } from \"../../app/listSlice\";\nimport { useAppDispatch } from \"../../app/store\";\nimport { useSelector } from \"react-redux\";\n\nconst List = (props) => {\n  const { listIssue = [], interact = true } = props;\n  const { highlightIssue = {} } = useSelector((state) => state.list);\n  const dispatch = useAppDispatch();\n\n  const handleHighlightIssue = (payload) => {\n    dispatch(setHighlightIssue(payload));\n    dispatch(addToRecentIssue(payload));\n  };\n\n  const renderListIssue = (listIssue) => {\n    return listIssue.map((issue, index) => {\n      const { id = \"\", title = \"\" } = issue;\n      const isActive = highlightIssue.id === id;\n      return (\n        <li\n          className={`${isActive ? 'active' : ''} ${interact ? 'interact' : 'dumb'}`}\n          onClick={() => {\n            if (interact) {\n              handleHighlightIssue({ issue, isActive })\n            }\n          }}\n          key={`issue_${index}`}\n        >\n          <span className=\"bold-text mr-6\">{id}</span>\n          {title.trim()}\n        </li>\n      );\n    });\n  };\n\n  return (\n    <div className=\"List\">\n      <ul>{renderListIssue(listIssue)}</ul>\n    </div>\n  );\n};\n\nList.propTypes = {\n  listIssue: PropTypes.arrayOf(PropTypes.object),\n  interact: PropTypes.bool,\n};\n\nexport default List;\n","import React from \"react\";\nimport \"./styles.scss\";\nimport { useSelector } from \"react-redux\";\n\nconst Menu = () => {\n  const { count } = useSelector((state) => state.list);\n  return (\n    <div className=\"Menu\">\n      <div className=\"badge\">{count}</div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport List from \"./components/List\";\nimport Menu from \"./components/Menu\";\nimport { useAppDispatch } from \"./app/store\";\nimport { useSelector } from \"react-redux\";\nimport { fetch } from \"./app/listSlice\";\n\nconst App = () => {\n  const { listIssue, recentIssue, loading } = useSelector((state) => state.list);\n  const dispatch = useAppDispatch();\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    dispatch(fetch({ page, per_page: 5 }));\n  }, [page]);\n\n  const handleClickNext = () => {\n    setPage(page + 1);\n  }\n\n  return (\n    <div className=\"App\">\n      <Menu />\n      <div className=\"content\">\n        <div className=\"list-issue\">\n          <h1>List issue</h1>\n          <List listIssue={listIssue} />\n          <button\n            className=\"nextBtn\"\n            onClick={handleClickNext}\n            disabled={loading}\n          >\n            {loading ? 'Loading...' : 'Next'}\n          </button>\n        </div>\n        <div className=\"list-issue\">\n          <h1>Recent issue</h1>\n          <List listIssue={recentIssue} interact={false} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./app/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}